/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import EvalContext from '../model/EvalContext';
import EvalResult from '../model/EvalResult';
import EvaluationBatchRequest from '../model/EvaluationBatchRequest';
import EvaluationBatchResponse from '../model/EvaluationBatchResponse';

/**
* Evaluation service.
* @module api/EvaluationApi
* @version 1.0.10
*/
export default class EvaluationApi {

    /**
    * Constructs a new EvaluationApi. 
    * @alias module:api/EvaluationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postEvaluation operation.
     * @callback module:api/EvaluationApi~postEvaluationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvalResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EvalContext} body evalution context
     * @param {module:api/EvaluationApi~postEvaluationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvalResult}
     */
    postEvaluation(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEvaluation");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvalResult;

      return this.apiClient.callApi(
        '/evaluation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postEvaluationBatch operation.
     * @callback module:api/EvaluationApi~postEvaluationBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvaluationBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/EvaluationBatchRequest} body evalution batch request
     * @param {module:api/EvaluationApi~postEvaluationBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvaluationBatchResponse}
     */
    postEvaluationBatch(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postEvaluationBatch");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluationBatchResponse;

      return this.apiClient.callApi(
        '/evaluation/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
