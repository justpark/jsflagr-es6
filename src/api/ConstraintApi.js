/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Constraint from '../model/Constraint';
import CreateConstraintRequest from '../model/CreateConstraintRequest';
import Error from '../model/Error';

/**
* Constraint service.
* @module api/ConstraintApi
* @version 1.0.10
*/
export default class ConstraintApi {

    /**
    * Constructs a new ConstraintApi. 
    * @alias module:api/ConstraintApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConstraint operation.
     * @callback module:api/ConstraintApi~createConstraintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Constraint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {module:model/CreateConstraintRequest} body create a constraint
     * @param {module:api/ConstraintApi~createConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Constraint}
     */
    createConstraint(flagID, segmentID, body, callback) {
      let postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling createConstraint");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling createConstraint");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createConstraint");
      }


      let pathParams = {
        'flagID': flagID,
        'segmentID': segmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Constraint;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}/constraints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConstraint operation.
     * @callback module:api/ConstraintApi~deleteConstraintCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {Number} constraintID numeric ID of the constraint
     * @param {module:api/ConstraintApi~deleteConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConstraint(flagID, segmentID, constraintID, callback) {
      let postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling deleteConstraint");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling deleteConstraint");
      }

      // verify the required parameter 'constraintID' is set
      if (constraintID === undefined || constraintID === null) {
        throw new Error("Missing the required parameter 'constraintID' when calling deleteConstraint");
      }


      let pathParams = {
        'flagID': flagID,
        'segmentID': segmentID,
        'constraintID': constraintID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findConstraints operation.
     * @callback module:api/ConstraintApi~findConstraintsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Constraint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {module:api/ConstraintApi~findConstraintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Constraint>}
     */
    findConstraints(flagID, segmentID, callback) {
      let postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling findConstraints");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling findConstraints");
      }


      let pathParams = {
        'flagID': flagID,
        'segmentID': segmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Constraint];

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}/constraints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putConstraint operation.
     * @callback module:api/ConstraintApi~putConstraintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Constraint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} segmentID numeric ID of the segment
     * @param {Number} constraintID numeric ID of the constraint
     * @param {module:model/CreateConstraintRequest} body create a constraint
     * @param {module:api/ConstraintApi~putConstraintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Constraint}
     */
    putConstraint(flagID, segmentID, constraintID, body, callback) {
      let postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling putConstraint");
      }

      // verify the required parameter 'segmentID' is set
      if (segmentID === undefined || segmentID === null) {
        throw new Error("Missing the required parameter 'segmentID' when calling putConstraint");
      }

      // verify the required parameter 'constraintID' is set
      if (constraintID === undefined || constraintID === null) {
        throw new Error("Missing the required parameter 'constraintID' when calling putConstraint");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putConstraint");
      }


      let pathParams = {
        'flagID': flagID,
        'segmentID': segmentID,
        'constraintID': constraintID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Constraint;

      return this.apiClient.callApi(
        '/flags/{flagID}/segments/{segmentID}/constraints/{constraintID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
