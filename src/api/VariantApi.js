/**
 * Flagr
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVariantRequest from '../model/CreateVariantRequest';
import Error from '../model/Error';
import PutVariantRequest from '../model/PutVariantRequest';
import Variant from '../model/Variant';

/**
* Variant service.
* @module api/VariantApi
* @version 1.0.10
*/
export default class VariantApi {

    /**
    * Constructs a new VariantApi. 
    * @alias module:api/VariantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVariant operation.
     * @callback module:api/VariantApi~createVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {module:model/CreateVariantRequest} body create a variant
     * @param {module:api/VariantApi~createVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variant}
     */
    createVariant(flagID, body, callback) {
      let postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling createVariant");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createVariant");
      }


      let pathParams = {
        'flagID': flagID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variant;

      return this.apiClient.callApi(
        '/flags/{flagID}/variants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariant operation.
     * @callback module:api/VariantApi~deleteVariantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} variantID numeric ID of the variant
     * @param {module:api/VariantApi~deleteVariantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariant(flagID, variantID, callback) {
      let postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling deleteVariant");
      }

      // verify the required parameter 'variantID' is set
      if (variantID === undefined || variantID === null) {
        throw new Error("Missing the required parameter 'variantID' when calling deleteVariant");
      }


      let pathParams = {
        'flagID': flagID,
        'variantID': variantID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/flags/{flagID}/variants/{variantID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findVariants operation.
     * @callback module:api/VariantApi~findVariantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Variant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {module:api/VariantApi~findVariantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Variant>}
     */
    findVariants(flagID, callback) {
      let postBody = null;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling findVariants");
      }


      let pathParams = {
        'flagID': flagID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Variant];

      return this.apiClient.callApi(
        '/flags/{flagID}/variants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putVariant operation.
     * @callback module:api/VariantApi~putVariantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} flagID numeric ID of the flag
     * @param {Number} variantID numeric ID of the variant
     * @param {module:model/PutVariantRequest} body update a variant
     * @param {module:api/VariantApi~putVariantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variant}
     */
    putVariant(flagID, variantID, body, callback) {
      let postBody = body;

      // verify the required parameter 'flagID' is set
      if (flagID === undefined || flagID === null) {
        throw new Error("Missing the required parameter 'flagID' when calling putVariant");
      }

      // verify the required parameter 'variantID' is set
      if (variantID === undefined || variantID === null) {
        throw new Error("Missing the required parameter 'variantID' when calling putVariant");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putVariant");
      }


      let pathParams = {
        'flagID': flagID,
        'variantID': variantID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variant;

      return this.apiClient.callApi(
        '/flags/{flagID}/variants/{variantID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
